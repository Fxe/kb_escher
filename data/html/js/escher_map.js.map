{"version": 3, "mappings": "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", "sources": ["escher_map.py"], "names": ["this.escher_map", "escher_map", "this.escher_graph", "this.escher_data", "next_id", "node_id", "node", "map_uid", "cpd_remap", "map_reaction", "rxn_remap", "m", "node_uid_map", "node_uid", "bigg_id", "set", "node_uid_map[bigg_id].add", "rnode", "met_id_to_uid", "s", "s_uid", "from_node_id", "to_node_id", "from_node", "to_node", "delete_uids", "cpd_ids", "delete_uids.add", "updated", "delete_markers", "delete_compounds", "tagged_compounds", "rxn_ids", "n_type", "delete_compounds.add", "delete_markers.add", "remove_compounds", "reactions", "list", "this.escher_graph[\"reactions\"].values", "metabolites", "filter", "this.escher_graph[\"nodes\"].values", "a", "x", "coords", "x1", "x2", "n", "pos_x", "func", "y", "prod", "coords.append", "rotate", "orient", "prim_node_ids", "second_node_ids", "node_ids2", "stoich", "rxn_numb", "node_ids2.append", "k", "node_ids2.length", "prim_node_ids.append", "node_ids2.pop", "second_node_ids.append", "stoich.length", "midmark", "midmark_top", "copy", "copy.deepcopy", "midmark_bottom", "prim_react_id", "prim_prod_id", "midmark_id", "midmark_top_id", "midmark_bottom_id", "prim_nodes", "this.get_nodes", "second_nodes", "max", "layout", "layout[\"nodes\"].keys", "prim_react", "prim_prod", "cc", "prev_prod", "math", "math.pi", "add_prim_nodes", "cc_coords", "reaction_length", "x_coord", "y_coord", "math.cos", "math.sin", "prev_id", "cc_coords.keys", "maxR", "layout[\"reactions\"].keys", "maxS", "layout[\"reactions\"][k][\"segments\"].keys", "j", "ops", "operator", "operator.add", "operator.sub", "top", "p_to_s", "mod", "deg", "second_nodes.length", "add_secondary_nodes", "add_segment", "layout[\"reactions\"][(maxR + 1).toString()][\"metabolites\"].append", "add_reaction", "qx", "y1", "qy", "dist1", "dist2", "react_coords", "react_nodes", "prod_coords", "react_nodes.append", "second_nodes.pop", "prod_nodes", "react_nodes.length", "generate_coords", "react_coords.length", "secondary", "c", "prod_nodes.length", "prod_coords.length", "prim_nodes.values", "nodes_in_layout", "math.atan", "add_curved_segment", "this.add_reaction", "builder", "escher", "escher.Builder", "json", "json.dumps", "builder.display_in_notebook", "enable_editing", "offset_x", "offset_y", "this.nodes", "uid", "n[\"x\"]", "n[\"y\"]", "n[\"label_x\"]", "n[\"label_y\"]", "rnode[\"label_x\"]", "rnode[\"label_y\"]", "segment", "segment[\"b1\"][\"x\"]", "segment[\"b1\"][\"y\"]", "segment[\"b2\"][\"x\"]", "segment[\"b2\"][\"y\"]", "tlabel", "tlabel[\"x\"]", "tlabel[\"y\"]", "data", "EscherMap"], "sourcesContent": ["import json\nimport math\nimport copy\nimport escher\n\n\nclass EscherMap:\n    \n    def __init__(self, escher_map):\n        self.escher_map = escher_map\n        self.escher_graph = escher_map[1]\n        self.escher_data = escher_map[0]\n        \n    def get_next_id(self):\n        next_id = 0\n        for node_id in self.escher_graph['nodes']:\n            if int(node_id) >= next_id:\n                next_id = int(node_id) + 1\n\n        return next_id\n        \n    def swap_ids(self, cpd_remap, rxn_remap):\n        for map_uid in self.escher_graph['nodes']:\n            node = self.escher_graph['nodes'][map_uid]\n            if node['node_type'] == 'metabolite' and node['bigg_id'] in cpd_remap:\n                node['bigg_id'] = cpd_remap[node['bigg_id']]\n        for map_uid in self.escher_graph['reactions']:\n            map_reaction = self.escher_graph['reactions'][map_uid]\n            if map_reaction['bigg_id'] in rxn_remap:\n                map_reaction['bigg_id'] = rxn_remap[map_reaction['bigg_id']]\n            for m in map_reaction['metabolites']:\n                if m['bigg_id'] in cpd_remap:\n                    m['bigg_id'] = cpd_remap[m['bigg_id']]\n    \n    def add_uid_to_reaction_metabolites(self):\n        node_uid_map = {}\n        for node_uid in self.escher_graph['nodes']:\n            node = self.escher_graph['nodes'][node_uid]\n            if node['node_type'] == 'metabolite':\n                bigg_id = node['bigg_id']\n                if not bigg_id in node_uid_map:\n                    node_uid_map[bigg_id] = set()\n                node_uid_map[bigg_id].add(node_uid)\n\n        for node_uid in self.escher_graph['reactions']:\n            rnode = self.escher_graph['reactions'][node_uid]\n            met_id_to_uid = {}\n            for s_uid in rnode['segments']:\n                s = rnode['segments'][s_uid]\n                from_node_id = rnode['segments'][s_uid]['from_node_id']\n                to_node_id = rnode['segments'][s_uid]['to_node_id']\n                from_node = self.escher_graph['nodes'][from_node_id]\n                to_node = self.escher_graph['nodes'][to_node_id]\n                if from_node['node_type'] == 'metabolite':\n                    if not from_node['bigg_id'] in met_id_to_uid:\n                        met_id_to_uid[from_node['bigg_id']] = from_node_id\n                    else:\n                        print('!!!', from_node['bigg_id'])\n                if to_node['node_type'] == 'metabolite':\n                    if not to_node['bigg_id'] in met_id_to_uid:\n                        met_id_to_uid[to_node['bigg_id']] = to_node_id\n                    else:\n                        print('!!!', to_node['bigg_id'])\n\n            for m in rnode['metabolites']:\n                if m['bigg_id'] in met_id_to_uid:\n                    m['node_uid'] = met_id_to_uid[m['bigg_id']]\n\n            #print(met_id_to_uid)\n            #print(rnode)\n            #break\n\n        return node_uid_map\n    \n    def delete_metabolites(self, cpd_ids):\n        delete_uids = set()\n        for map_uid in self.escher_graph['nodes']:\n            node = self.escher_graph['nodes'][map_uid]\n            if node['node_type'] == 'metabolite':\n                node_id = node['bigg_id']\n\n                if node_id in cpd_ids:\n                    delete_uids.add(map_uid)\n\n        for map_uid in delete_uids:\n            del self.escher_graph['nodes'][map_uid]\n            \n    def delete_reactions(self, rxn_ids, remove_compounds = False):\n        updated = {}\n        delete_markers = set()\n        delete_compounds = set()\n        tagged_compounds = set()\n        for map_uid in self.escher_graph['reactions']:\n            rnode = self.escher_graph['reactions'][map_uid]\n            if not rnode['bigg_id'] in rxn_ids:\n                updated[map_uid] = rnode\n            else:\n                for s_uid in rnode['segments']:\n                    s = rnode['segments'][s_uid]\n                    from_node_id = s['from_node_id']\n                    to_node_id = s['to_node_id']\n                    n_type = self.escher_graph['nodes'][from_node_id]['node_type']\n                    if n_type == 'metabolite':\n                        delete_compounds.add(from_node_id)\n                    else:\n                        delete_markers.add(from_node_id)\n                    #print(from_node_id, n_type)\n                    n_type = self.escher_graph['nodes'][to_node_id]['node_type']\n                    if n_type == 'metabolite':\n                        delete_compounds.add(to_node_id)\n                    else:\n                        delete_markers.add(to_node_id)\n                    #print(to_node_id, n_type)\n                    #print(s_uid, s)\n                #print(rnode)\n        #delete also midmarkers\n        for map_uid in delete_markers:\n            del self.escher_graph['nodes'][map_uid]\n        #delete oprhan compounds\n        if remove_compounds:\n            pass\n        self.escher_graph['reactions'] = updated\n    \n    @property\n    def nodes(self):\n        return self.escher_graph['nodes']\n    \n    #@property\n    #def reactions(self):\n    #    return self.escher_graph['reactions']\n    \n    @property\n    def reactions(self):\n        reactions = list(\n            self.escher_graph['reactions'].values()\n        )\n\n        return reactions\n    \n    @property\n    def metabolites(self):\n        metabolites = list(\n            filter(\n                lambda o : o['node_type'] == 'metabolite', \n                self.escher_graph['nodes'].values()\n            )\n        )\n\n        return metabolites\n    \n    def generate_coords(self, func, n, x1, x2, x, y, orient, prod):\n        a = x\n        coords = []\n        for pos_x in range(x1, x2, int((x2 - x1) / n)):\n            print(pos_x + x, func(pos_x) + y)\n            if prod:\n                a -= 500\n            coords.append([rotate(a, y, pos_x + x, func(pos_x) + y, orient)[0], rotate(a, y, pos_x + x, func(pos_x) + y, orient)[1]])\n            if prod:\n                a += 500\n        return coords\n    \n    def get_nodes(self, stoich, rxn_numb):\n        prim_node_ids = list()\n        second_node_ids = list()\n        node_ids2 = list()\n\n        for k in stoich[str(rxn_numb)]:\n            node_ids2.append(k)\n\n        for k in range(0, len(node_ids2)):\n            if stoich[str(rxn_numb)][node_ids2[k]] < 0:\n                prim_node_ids.append(node_ids2.pop(k))\n                break\n\n        for k in range(0, len(node_ids2)):\n            if stoich[str(rxn_numb)][node_ids2[k]] > 0:\n                prim_node_ids.append(node_ids2.pop(k))\n                break\n\n        for k in node_ids2:\n            second_node_ids.append(k)\n\n        return prim_node_ids, second_node_ids\n    \n    def add_reaction(self, stoich, x_coord, y_coord, orient, reaction_length, prim_react, prim_prod, layout, rxn_numb, cc_coords, cc, prev_prod, prev_id):\n        # base case\n        if rxn_numb >= len(stoich):\n            return\n        # add midmarker node\n\n        midmark = {'y': 0, 'x': 0, 'node_type': 'midmarker'}\n        midmark_top = copy.deepcopy(midmark)\n        midmark_bottom = copy.deepcopy(midmark)\n        prim_react_id = 0\n        prim_prod_id = 0 \n        midmark_id = 0\n        midmark_top_id = 0\n        midmark_bottom_id = 0\n\n        prim_nodes = self.get_nodes(stoich, rxn_numb)[0]\n        second_nodes = self.get_nodes(stoich, rxn_numb)[1]\n        print(prim_nodes)\n        # find largest key in layout\n        max = 0\n        for k in layout['nodes'].keys():\n            k = int(k)\n            if k > max:\n                max = k\n        prim_react = {'node_is_primary': True,\n                        'name': 'compound1',\n                        'label_x': 0,\n                        'node_type': 'metabolite',\n                        'y': 0,\n                        'x': 0,\n                        'label_y': 0\n                         }\n        prim_prod = {'node_is_primary': True,\n                        'name': 'compound1',\n                        'label_x': 0,\n                        'node_type': 'metabolite',\n                        'y': 0,\n                        'x': 0,\n                        'label_y': 0\n                         }  \n\n        prim_react['bigg_id'] = prim_nodes[0]\n        prim_prod['bigg_id'] = prim_nodes[1]\n\n        # Check to see if either node is chained    \n        if prim_react['bigg_id'] not in cc or (prev_prod == prim_react['bigg_id'] or prev_prod == None):\n            # check to see if product is chained\n            if prim_prod['bigg_id'] in cc and (prev_prod != None and prev_prod != prim_react['bigg_id']):\n                orient += math.pi / 2\n                orient = add_prim_nodes(prim_react, prim_prod, orient, cc_coords, reaction_length, midmark, layout)\n                orient += math.pi\n                layout['nodes'][str(max + 1)] = prim_react\n                layout['nodes'][str(max + 2)] = midmark\n                layout['nodes'][str(max + 3)] = midmark_top\n                layout['nodes'][str(max + 4)] = midmark_bottom\n                prim_prod_id = cc_coords[prim_prod['bigg_id']]['node_id']\n                prim_react_id = str(max + 1)\n                midmark_id = str(max + 2)\n                midmark_top_id = str(max + 3)\n                midmark_bottom_id = str(max + 4)\n                max += 4\n            # chained but linear    \n            else:\n                prim_react['x'] = x_coord\n                prim_react['y'] = y_coord\n                prim_react['label_x'] = x_coord - 30\n                prim_react['label_y'] = y_coord - 30\n                for n in layout['nodes']:\n                    if layout['nodes'][n]['node_type'] == 'metabolite':\n                        while (math.cos(orient) * reaction_length) + prim_react['x'] == layout['nodes'][n]['x'] and  - (math.sin(orient) * reaction_length) + prim_react['y'] == layout['nodes'][n]['y']:\n                            orient += math.pi / 2\n                prim_prod['x'] = (math.cos(orient) * reaction_length) + prim_react['x'] \n                prim_prod['y'] = - (math.sin(orient) * reaction_length) + prim_react['y'] \n                prim_prod['label_x'] = (math.cos(orient) * reaction_length) + prim_react['label_x']\n                prim_prod['label_y'] = - (math.sin(orient) * reaction_length) + prim_react['label_y']\n                midmark['x'] = (math.cos(orient) * (reaction_length / 2)) + prim_react['x'] \n                midmark['y'] = - (math.sin(orient) * (reaction_length / 2)) + prim_react['y']\n                layout['nodes'][str(max + 1)] = midmark\n                layout['nodes'][str(max + 2)] = prim_prod\n                layout['nodes'][str(max + 3)] = midmark_top\n                layout['nodes'][str(max + 4)] = midmark_bottom\n                prim_prod_id = str(max + 2)\n                prim_react_id = prev_id\n                midmark_top_id = str(max + 3)\n                midmark_bottom_id = str(max + 4)\n                midmark_id = str(max + 1)\n                max += 4\n\n                if rxn_numb == 0:\n                    max -= 4\n                    layout['nodes'][str(max + 1)] = prim_react\n                    layout['nodes'][str(max + 2)] = prim_prod\n                    layout['nodes'][str(max + 3)] = midmark\n                    layout['nodes'][str(max + 4)] = midmark_top\n                    layout['nodes'][str(max + 5)] = midmark_bottom\n                    prim_react_id = str(max + 1)\n                    midmark_id = str(max + 3)\n                    midmark_top_id = str(max + 4)\n                    midmark_bottom_id = str(max + 5)\n                    max += 5\n        else:\n            if prim_prod['bigg_id'] in cc_coords.keys():\n                orient += math.pi / 2\n                add_prim_nodes(prim_react, prim_prod, orient, cc_coords, reaction_length, midmark, layout)\n                orient += math.pi\n                layout['nodes'][str(max + 1)] = prim_react\n                layout['nodes'][str(max + 2)] = midmark\n                layout['nodes'][str(max + 3)] = midmark_top\n                layout['nodes'][str(max + 4)] = midmark_bottom\n                prim_prod_id = cc_coords[prim_prod['bigg_id']]['node_id']\n                prim_react_id = str(max + 1)\n                midmark_id = str(max + 2)\n                midmark_top_id = str(max + 3)\n                midmark_bottom_id = str(max + 4)\n                max += 4\n\n            else:\n                orient += 3 * math.pi / 2\n                add_prim_nodes(prim_prod, prim_react, orient, cc_coords, reaction_length, midmark, layout)\n                layout['nodes'][str(max + 2)] = prim_prod\n                layout['nodes'][str(max + 3)] = midmark\n                layout['nodes'][str(max + 4)] = midmark_top\n                layout['nodes'][str(max + 5)] = midmark_bottom\n                prim_react_id = cc_coords[prim_react['bigg_id']]['node_id']\n                prim_prod_id = str(max + 2)\n                midmark_id = str(max + 3)\n                midmark_top_id = str(max + 4)\n                midmark_bottom_id = str(max + 5)\n                max += 5\n\n\n\n        # add coordinates of branched reactions\n        if prim_prod['bigg_id'] in cc:\n            cc_coords[prim_prod['bigg_id']]['x'] = prim_prod['x']\n            cc_coords[prim_prod['bigg_id']]['y'] = prim_prod['y']\n            cc_coords[prim_prod['bigg_id']]['node_id'] = prim_prod_id\n\n        if prim_react['bigg_id'] in cc:\n            cc_coords[prim_react['bigg_id']]['x'] = prim_react['x']\n            cc_coords[prim_react['bigg_id']]['y'] = prim_react['y']\n            cc_coords[prim_react['bigg_id']]['node_id'] = prim_react_id\n\n\n        if rxn_numb == 0 and prim_react['bigg_id'] in cc:\n            cc_coords[prim_react['bigg_id']]['x'] = prim_react['x']\n            cc_coords[prim_react['bigg_id']]['y'] = prim_react['y']\n            cc_coords[prim_react['bigg_id']]['node_id'] = prim_react_id\n\n        # get largest key for reactions\n        maxR = 0\n        for k in layout['reactions'].keys():\n            k = int(k)\n            if k > maxR:\n                maxR = k\n\n        # get largest key for segments\n        maxS = 0\n        for k in layout['reactions'].keys():\n            for j in layout['reactions'][k]['segments'].keys():\n                if int(j) > maxS:\n                    maxS = int(j)\n\n        layout['reactions'][str(maxR + 1)] = {'name': str(rxn_numb),\n              'bigg_id': str(rxn_numb),\n              'segments': {},\n              'genes': [],\n              'reversibility': False,\n              'metabolites': [],\n              'label_x': midmark['x'] + 50 * math.sin(orient),\n              'label_y': midmark['y'] + 50 * math.cos(orient),\n              'gene_reaction_rule': ''}\n\n\n        midmark_top['x'] = midmark['x'] - 25 * (math.cos(orient))\n        midmark_bottom['x'] = midmark['x'] + 25 * (math.cos(orient))\n        midmark_top['y'] = midmark['y'] + 25 * (math.sin(orient))\n        midmark_bottom['y'] = midmark['y'] - 25 * (math.sin(orient))\n\n\n        # alternate secondary node positions    \n        ops = [operator.add, operator.sub]\n\n        top = False\n        p_to_s = 100\n        mod = 0\n        deg = 0\n        # add secondary nodes to layout\n        if len(second_nodes) > 0:\n            maxS = add_secondary_nodes(second_nodes, orient, prim_react['x'], prim_react['y'], layout, stoich[str(rxn_numb)], midmark_top_id, midmark_bottom_id, midmark_id, midmark_top, midmark_bottom, midmark, maxR)\n        maxS += 1\n        #     for n in range(2, len(node_ids)):\n    #         add_length = reaction_length\n    #         if mod % 2 == 0:\n    #             p_to_s += 60\n    #             deg += math.pi / 30\n\n    #         secondary = {'node_is_primary': False,\n    #                       'name': 'compound1',\n    #                       'label_x': 0,\n    #                       'node_type': 'metabolite',\n    #                       'y': 0,\n    #                       'x': 0,\n    #                       'bigg_id': node_ids[n],\n    #                       'label_y': 0\n    #                      }\n\n    #         # secondary nodes are reactants\n    #         react = False\n    #         if int(stoich[str(rxn_numb)][str(node_ids[n])]) < 0:\n    #             add_length = 0\n    #             react = True\n\n    #         # transformation matrix\n    #         secondary['x'] = (ops[not(top)](abs(add_length - p_to_s * math.cos(math.pi / 6)) * (math.cos(orient)), (p_to_s * math.sin(math.pi / 6) * (math.sin(orient)))) + prim_react['x']) \n    #         secondary['y'] = (- ops[top](abs(add_length - p_to_s * math.cos(math.pi / 6)) * (math.sin(orient)), (p_to_s * math.sin(math.pi / 6) * (math.cos(orient)))) + prim_react['y']) \n    #         secondary['label_x'] = ops[top](secondary['x'] ,(30 * math.sin(orient)))\n    #         secondary['label_y'] = ops[not(top)](secondary['y'] ,(30 * math.cos(orient)))\n    #         layout['nodes'][str(max + 1)] = secondary\n    #         add_segment(layout, midmark_top_id, str(max + 1), maxR, maxS, midmark, midmark_top, secondary, react, orient, n)\n    #         layout['reactions'][str(maxR + 1)]['metabolites'].append({'coefficient': stoich[str(rxn_numb)][secondary['bigg_id']], 'bigg_id': secondary['bigg_id'] })\n    #         maxS += 1\n    #         max += 1\n    #         top = not(top)\n    #         mod += 1\n\n\n\n        # add segments\n        add_segment(layout, midmark_top_id, prim_react_id, maxR, maxS, midmark, midmark_top, prim_react, 1, orient, 0)\n        layout['reactions'][str(maxR + 1)]['metabolites'].append({'coefficient': stoich[str(rxn_numb)][prim_react['bigg_id']], 'bigg_id': prim_react['bigg_id'] })\n        add_segment(layout, prim_prod_id, midmark_bottom_id, maxR, maxS + 1, midmark, prim_prod, midmark_bottom, 0, orient, 0)\n        layout['reactions'][str(maxR + 1)]['metabolites'].append({'coefficient': stoich[str(rxn_numb)][prim_prod['bigg_id']], 'bigg_id': prim_prod['bigg_id'] })\n        add_segment(layout, midmark_id, midmark_top_id, maxR, maxS + 2, midmark, midmark, midmark_top, None, orient, 0)\n        add_segment(layout, midmark_bottom_id, midmark_id, maxR, maxS + 3, midmark, midmark_bottom, midmark, None, orient, 0)\n\n\n        # recursively place next reaction\n        add_reaction(stoich, prim_prod['x'], prim_prod['y'], 3 * math.pi / 2, 500, 't1', 't2', layout, rxn_numb + 1, cc_coords, cc, prim_prod['bigg_id'], prim_prod_id )\n    \n    def rotate(self, x, y, x1, y1, orient):\n        qx = x + math.cos(orient) * (x1 - x) - math.sin(orient) * (y1 - y)\n        qy = y - (math.sin(orient) * (x1 - x) + math.cos(orient) * (y1 - y))\n        return qx, qy\n    \n    def add_prim_nodes(self, prim_react, prim_prod, orient, cc_coords, reaction_length, midmark, layout):\n        prim_prod['x'] = cc_coords[prim_prod['bigg_id']]['x']\n        prim_prod['y'] = cc_coords[prim_prod['bigg_id']]['y']\n        prim_prod['label_x'] = prim_prod['x'] - 30\n        prim_prod['label_y'] = prim_prod['y'] - 30\n        for n in layout['nodes']:\n            if layout['nodes'][n]['node_type'] == 'metabolite':\n                while (math.cos(orient) * reaction_length) + prim_prod['x'] == layout['nodes'][n]['x'] and  - (math.sin(orient) * reaction_length) + prim_prod['y'] == layout['nodes'][n]['y']:\n                    orient += math.pi / 2\n        prim_react['x'] = (math.cos(orient) * reaction_length) + prim_prod['x'] \n        prim_react['y'] = - (math.sin(orient) * reaction_length) + prim_prod['y'] \n        prim_react['label_x'] = (math.cos(orient) * reaction_length) + prim_prod['label_x']\n        prim_react['label_y'] = - (math.sin(orient) * reaction_length) + prim_prod['label_y']\n        midmark['x'] = prim_react['x'] - (math.cos(orient) * (reaction_length / 2))   \n        midmark['y'] = prim_react['y'] + (math.sin(orient) * (reaction_length / 2)) \n        return orient\n    \n    def add_segment(self, layout, to_node_id, from_node_id, maxR, maxS, midmark, to_node, from_node, top, orient, n):\n        dist1 = 50\n        dist2 = 150\n        if to_node['node_type'] == 'metabolite':\n            if not(to_node['node_is_primary']):\n                dist1 = 50 - (2 * n)\n                dist2 = 150 - (2 * n)\n        if from_node['node_type'] == 'metabolite':\n            if not(from_node['node_is_primary']):\n                dist1 = 50 - (2 * n)\n                dist2 = 150 - (2 * n)\n        layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)] = {}\n        layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)]['to_node_id'] = to_node_id\n        layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)]['from_node_id'] = from_node_id\n        layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)]['b2'] = {}\n        layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)]['b1'] = {}\n        if to_node['node_type'] == 'midmarker' and from_node['node_type'] == 'midmarker':\n            layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)]['b2'] = None\n            layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)]['b1'] = None\n        else:\n            layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)]['b2']['x'] = midmark['x']\n            layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)]['b2']['y'] = midmark['y']\n            layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)]['b1']['y'] = midmark['y']\n            layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)]['b1']['x'] = midmark['x']\n            layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)]['b2']['y'] = ops[not(top)](midmark['y'], dist1 * math.sin(orient))\n            layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)]['b1']['y'] = ops[not(top)](midmark['y'], dist2 * math.sin(orient))\n            layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)]['b2']['x'] = ops[top](midmark['x'], dist1 * math.cos(orient))\n            layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)]['b1']['x'] = ops[top](midmark['x'], dist2 * math.cos(orient))\n    \n    def add_secondary_nodes(self, second_nodes, orient, x_coord, y_coord, layout, stoich, midmark_top_id, midmark_bottom_id, midmark_id, midmark_top, midmark_bottom, midmark, maxR):\n        react_coords = []\n        react_nodes = []\n        prod_coords = []\n        for n in range(0, len(second_nodes) - 1):\n            if stoich[second_nodes[n]] < 0:\n                react_nodes.append(second_nodes.pop(n))\n\n        prod_nodes = second_nodes \n        max = 0\n        for n in layout['nodes']:\n            if int(n) > max:\n                max = int(n)\n        maxS = 0\n        for k in layout['reactions']:\n            for j in layout['reactions'][k]['segments']:\n                if int(j) > maxS:\n                    maxS = int(j)\n\n        if len(react_nodes) > 0: \n            react_coords = generate_coords(lambda x : pow(x, 2) / 30, len(react_nodes), 60, 160, x_coord, y_coord, orient, False)\n        for c in range(0, len(react_coords)):\n            secondary = {'node_is_primary': False,\n                          'name': 'compound1',\n                          'label_x': 0,\n                          'node_type': 'metabolite',\n                          'y': 0,\n                          'x': 0,\n                          'bigg_id': '',\n                          'label_y': 0\n                         }\n            secondary['x'] = react_coords[c][0]\n            secondary['label_x'] = react_coords[c][0]\n            secondary['y'] = react_coords[c][1]\n            secondary['label_y'] = react_coords[c][1] + 30\n            secondary['bigg_id'] = react_nodes[c]\n            layout['nodes'][str(max + 1)] = secondary\n            add_segment(layout, str(max + 1), midmark_top_id, maxR, maxS, midmark, secondary, midmark_top, True, orient, c)\n            layout['reactions'][str(maxR + 1)]['metabolites'].append({'coefficient': -1, 'bigg_id': react_nodes[c]})\n            max += 1\n            maxS += 1\n\n        if len(react_nodes) > 0:         \n            prod_coords = generate_coords(lambda x : pow(x, 2) / 30, len(prod_nodes), -60, -160, x_coord + 500, y_coord, orient, True)\n        for c in range(0, len(prod_coords) - 1):\n            secondary = {'node_is_primary': False,\n                          'name': 'compound1',\n                          'label_x': 0,\n                          'node_type': 'metabolite',\n                          'y': 0,\n                          'x': 0,\n                          'bigg_id': '',\n                          'label_y': 0\n                         }\n            secondary['x'] = prod_coords[c][0]\n            secondary['label_x'] = prod_coords[c][0]\n            secondary['y'] = prod_coords[c][1]\n            secondary['label_y'] = prod_coords[c][1] + 30\n            secondary['bigg_id'] = prod_nodes[c]\n            layout['nodes'][str(max + 1)] = secondary\n            add_segment(layout, str(max + 1), midmark_bottom_id, maxR, maxS, midmark, secondary, midmark_bottom, False, orient, c)\n            layout['reactions'][str(maxR + 1)]['metabolites'].append({'coefficient': -1, 'bigg_id': prod_nodes[c]})\n            max += 1\n            maxS += 1\n\n        return maxS\n    \n    def add_curved_segment(self, layout, to_node_id, from_node_id, x, y):\n        maxS = 0\n        for k in layout['reactions']:\n            for j in layout['reactions'][k]['segments']:\n                if int(j) > maxS:\n                    maxS = int(j)\n        maxR = 0\n        for k in layout['reactions'].keys():\n            k = int(k)\n            if k > maxR:\n                maxR = k\n        layout['reactions'][str(maxR + 1)] = {'name': 1,\n                  'bigg_id': 1,\n                  'segments': {},\n                  'genes': [],\n                  'reversibility': False,\n                  'metabolites': [],\n                  'label_x': 0,\n                  'label_y': 0,\n                  'gene_reaction_rule': ''}\n        layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)] = {}\n        layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)]['to_node_id'] = to_node_id\n        layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)]['from_node_id'] = from_node_id\n        layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)]['b2'] = {}\n        layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)]['b1'] = {}\n        layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)]['b2']['x'] = x - 30\n        layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)]['b2']['y'] = y - 30\n        layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)]['b1']['y'] = y - 30\n        layout['reactions'][str(maxR + 1)]['segments'][str(maxS + 1)]['b1']['x'] = x - 30\n\n    def add_branches(self, layout, prim_react, prim_react_id, prim_nodes, numb, nodes_in_layout, reaction_length, max):\n        maxS = 0\n        for k in layout['reactions']:\n            for j in layout['reactions'][k]['segments']:\n                if int(j) > maxS:\n                    maxS = int(j)\n        maxR = 0\n        for k in layout['reactions'].keys():\n            k = int(k)\n            if k > maxR:\n                maxR = k\n        x = 0\n        midmark = {'y': prim_react['y'], 'x': prim_react['x'] + (reaction_length / 2), 'node_type': 'midmarker'}\n        midmark_top = copy.deepcopy(midmark)\n        midmark_bottom = copy.deepcopy(midmark)\n        for n in prim_nodes.values():\n            if n[0][0] == prim_react['bigg_id'] and n[1][0] not in nodes_in_layout:\n\n                prim_prod = {'node_is_primary': True,\n                        'name': 'compound1',\n                        'label_x': prim_react['x'] + reaction_length,\n                        'node_type': 'metabolite',\n                        'y': prim_react['y'] - x * reaction_length,\n                        'x': prim_react['x'] + reaction_length,\n                        'label_y': prim_react['y'] - x * reaction_length,\n                        'bigg_id': n[1][0]\n                         }\n                orient = math.atan((x * reaction_length) / (reaction_length))\n                midmark = {'y': prim_prod['y'] + reaction_length / 2, 'x': (prim_prod['x'] - reaction_length / 2) - 100, 'node_type': 'midmarker'}\n                midmark_top = {'y': prim_prod['y'] + reaction_length / 2 - (30 * math.sin(orient)), 'x': (prim_prod['x'] - reaction_length / 2 + (30 * math.cos(orient)) - 100) , 'node_type': 'midmarker'}\n                midmark_bottom = {'y': prim_prod['y'] + reaction_length / 2 + (30 * math.sin(orient)), 'x': (prim_prod['x'] - reaction_length / 2 - (30 * math.cos(orient)) - 100), 'node_type': 'midmarker'}\n                layout['nodes'][str(max + 1)] = prim_prod\n                layout['nodes'][str(max + 2)] = midmark\n                layout['nodes'][str(max + 3)] = midmark_top \n                layout['nodes'][str(max + 4)] = midmark_bottom\n                add_curved_segment(layout, max + 1, max + 3, ((prim_prod['x'] - reaction_length / 2 + 10) + (prim_react['x'] + reaction_length)) / 2, ((prim_react['y'] - x * reaction_length) + (prim_react['y'] - x * reaction_length)) / 2 )\n                add_curved_segment(layout, max + 4, prim_react_id, ((prim_prod['x'] - reaction_length / 2 - 10) + (prim_react['x'])) / 2, ((prim_prod['y'] + reaction_length / 2 + 10) + (prim_react['y'])) / 2 )\n                add_segment(layout, max + 2, max + 4, maxR, maxS + 2, midmark, midmark, midmark_bottom, True, orient, 1)\n                add_segment(layout, max + 3, max + 2, maxR, maxS + 3, midmark, midmark_top, midmark, True, orient, 1)\n                maxS += 3\n                max += 4\n                x += 1\n            if n[1][0] == prim_react['bigg_id'] and n[0][0] not in nodes_in_layout:\n                prim_prod = {'node_is_primary': True,\n                        'name': 'compound1',\n                        'label_x': prim_react['x'] + reaction_length,\n                        'node_type': 'metabolite',\n                        'y': prim_react['y'] - x * reaction_length,\n                        'x': prim_react['x'] + reaction_length,\n                        'label_y': prim_react['y'] - x * reaction_length,\n                        'bigg_id': n[0][0]\n                         }\n                orient = math.atan((x * reaction_length) / (reaction_length))\n                midmark = {'y': prim_prod['y'] + reaction_length / 2, 'x': prim_prod['x'] - reaction_length / 2, 'node_type': 'midmarker'}\n                midmark_top = {'y': prim_prod['y'] + reaction_length / 2 - (30 * math.sin(orient)), 'x': prim_prod['x'] - reaction_length / 2 + (30 * math.cos(orient)) , 'node_type': 'midmarker'}\n                midmark_bottom = {'y': prim_prod['y'] + reaction_length / 2 + (30 * math.sin(orient)), 'x': prim_prod['x'] - reaction_length / 2 - (30 * math.cos(orient)), 'node_type': 'midmarker'}\n                layout['nodes'][str(max + 1)] = prim_prod\n                layout['nodes'][str(max + 2)] = midmark\n                layout['nodes'][str(max + 3)] = midmark_top \n                layout['nodes'][str(max + 4)] = midmark_bottom\n                add_curved_segment(layout, max + 1, max + 3, ((prim_prod['x'] - reaction_length / 2 + 10) + (prim_react['x'] + reaction_length)) / 2, ((prim_react['y'] - x * reaction_length) + (prim_react['y'] - x * reaction_length)) / 2 )\n                add_curved_segment(layout, max + 4, prim_react_id, ((prim_prod['x'] - reaction_length / 2 - 10) + (prim_react['x'])) / 2, ((prim_prod['y'] + reaction_length / 2 + 10) + (prim_react['y'])) / 2 )\n                add_segment(layout, max + 2, max + 4, maxR, maxS + 2, midmark, midmark, midmark_bottom, True, orient, 1)\n                add_segment(layout, max + 3, max + 2, maxR, maxS + 3, midmark, midmark_top, midmark, True, orient, 1)\n                maxS += 3\n                max += 4\n                x += 1\n        return max\n    \n    def add_reactions(self, stoich, cc, x, y, layout):\n        cc_coords = {}\n        for c in cc:\n            cc_coords[c] = {'x': 0, 'y': 0}\n        self.add_reaction(stoich, x, y, 3 * math.pi / 2, 500, 't1', 't2', layout, 0, cc_coords, cc, None, None)\n    \n    def display_in_notebook(self, enable_editing = False):\n        builder = escher.Builder(map_json=json.dumps(self.escher_map))\n        return builder.display_in_notebook(enable_editing = enable_editing)\n    \n    def set_to_origin(self):\n        offset_x = self.escher_graph['canvas']['x']\n        offset_y = self.escher_graph['canvas']['y']\n        self.escher_graph['canvas']['x'] = 0\n        self.escher_graph['canvas']['y'] = 0\n\n        for uid in self.nodes:\n            n = self.nodes[uid]\n            n['x'] -= offset_x\n            n['y'] -= offset_y\n            if 'label_x' in n:\n                n['label_x'] -= offset_x\n            if 'label_y' in n:\n                n['label_y'] -= offset_y\n        for uid in self.escher_graph['reactions']:\n            rnode = self.escher_graph['reactions'][uid]\n            rnode['label_x'] -= offset_x\n            rnode['label_y'] -= offset_y\n            for s_uid in rnode['segments']:\n                segment = rnode['segments'][s_uid]\n                if 'b1' in segment and segment['b1']:\n                    segment['b1']['x'] -= offset_x\n                    segment['b1']['y'] -= offset_y\n                if 'b2' in segment and segment['b2']:\n                    segment['b2']['x'] -= offset_x\n                    segment['b2']['y'] -= offset_y\n        for uid in self.escher_graph['text_labels']:\n            tlabel = self.escher_graph['text_labels'][uid]\n            tlabel['x'] -= offset_x\n            tlabel['y'] -= offset_y\n    \n\n      \n    def clone(self):\n        data = copy.deepcopy(self.escher_map)\n        return EscherMap(data)"]}